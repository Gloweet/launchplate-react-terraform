name: AWS multi-env deployment

permissions:
  # Allows the workflow to request an OIDC token
  id-token: write

  # Required for actions/checkout
  contents: read

on:
  # checkov:skip=CKV_GHA_7 reason="Environment selection is safe and intentional"
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stg
          - prod
  push:
    branches:
      - "main"
      - "staging"
      - "development"
      - "release/*"
      - "feature/*"
      - "bugfix/*"
  pull_request:
    branches:
      - "main"
      - "staging"
      - "development"
      - "release/*"
      - "feature/*"
      - "bugfix/*"

env:
  aws_region: eu-west-3
  environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'stg' || github.ref_name == 'development' && 'dev') }}
  tf_version: "1.12.1"
  working_dir_tf: "terraform/live"
  working_dir_web: "web"
  tf_plugin_cache_dir: ${{ github.workspace }}/.terraform.d/plugin-cache

  # verbosity setting for Terraform logs
  TF_LOG: INFO

jobs:
  detect_changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      terraform_changes: ${{ steps.filter.outputs.terraform }}
      web_changes: ${{ steps.filter.outputs.web }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            terraform:
              - 'terraform/**'
            web:
              - 'web/**'

  tf_checks:
    name: TF Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || needs.detect_changes.outputs.terraform_changes == 'true'
    needs: detect_changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup AWS & Terraform Cache
        uses: ./.github/actions/setup-aws-tf-cache
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.aws_region }}
          cache-path: ${{ env.tf_plugin_cache_dir }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.tf_version }}

      - name: Terraform Format Check
        run: |
          cd ${{ env.working_dir_tf }}
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd ${{ env.working_dir_tf }}
          terraform init

      - name: Terraform Workspace
        run: |
          cd ${{ env.working_dir_tf }}
          terraform workspace select ${{ env.environment }} || terraform workspace new ${{ env.environment }}

      - name: Terraform Validate
        run: |
          cd ${{ env.working_dir_tf }}
          terraform validate

  web_build:
    name: Web Lint, Test & Build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || needs.detect_changes.outputs.web_changes == 'true'
    needs: [detect_changes]
    outputs:
      app_version: ${{ steps.get_version.outputs.app_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install dependencies
        run: cd ${{ env.working_dir_web }} && pnpm install

      - name: Run Vitest tests
        run: cd ${{ env.working_dir_web }} && pnpm test
        env:
          CI: true

      - name: Get App version
        id: get_version
        run: |
          cd ${{ env.working_dir_web }}
          APP_VERSION=$(node -p "require('./package.json').version")
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "App Version: $APP_VERSION"

      - name: Build project
        run: cd ${{ env.working_dir_web }} && npm run build:${{ env.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: ${{ env.working_dir_web }}/dist
          retention-days: 1

  tf_plan_apply:
    name: TF Apply
    needs: [tf_checks]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup AWS & Terraform Cache
        uses: ./.github/actions/setup-aws-tf-cache
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.aws_region }}
          cache-path: ${{ env.tf_plugin_cache_dir }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.tf_version }}

      - name: Terraform Init
        run: |
          cd ${{ env.working_dir_tf }}
          terraform init

      - name: Terraform Workspace
        run: |
          cd ${{ env.working_dir_tf }}
          terraform workspace select ${{ env.environment }} || terraform workspace new ${{ env.environment }}

      - name: Terraform Plan
        run: |
          cd ${{ env.working_dir_tf }}
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd ${{ env.working_dir_tf }}
          terraform apply -auto-approve

  s3_sync:
    name: Web Sync to S3
    needs: [web_build]
    if: github.event_name == 'workflow_dispatch' || needs.detect_changes.outputs.web_changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.aws_region }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: web/dist

      - name: Sync to S3 Release environment
        if: env.environment == 'prod'
        run: |
          aws s3 sync web/dist s3://${env.environment}-launchplate-react-primary && \
          aws s3 sync web/dist s3://${env.environment}-launchplate-react-failover

      - name: Sync to S3 Pre-release environment
        if: env.environment != 'prod'
        run: |
          aws s3 sync web/dist s3://${env.environment}-launchplate-react-primary

  slack:
    name: Slack
    needs: [s3_sync]
    if: always()
    runs-on: ubuntu-latest

    steps:
      # run this action to get the workflow conclusion
      - uses: technote-space/workflow-conclusion-action@v3

      # run other action with the workflow conclusion
      - uses: 8398a7/action-slack@v3
        # Prevents posting useless messages for skipped or cancelled workflows.
        if: env.WORKFLOW_CONCLUSION != 'skipped' && env.WORKFLOW_CONCLUSION != 'cancelled'

        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ env.WORKFLOW_CONCLUSION }}' === 'success' ? 'good' : '${{ env.WORKFLOW_CONCLUSION }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ env.WORKFLOW_CONCLUSION }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
